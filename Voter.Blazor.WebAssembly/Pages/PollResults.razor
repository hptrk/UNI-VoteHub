@page "/polls/{PollId:int}/results"
@using Voter.Shared.Models
@using Voter.Blazor.WebAssembly.Services
@attribute [Authorize]
@inject IPollService PollService
@inject NavigationManager NavigationManager

<PageTitle>Poll Results - VoteHub</PageTitle>

<h3>Poll Results</h3>

@if (loading)
{
    <div class="d-flex justify-content-center mt-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (error != null)
{
    <div class="alert alert-danger mt-3" role="alert">
        @error
    </div>
    <button class="btn btn-secondary" @onclick="GoBack">Back</button>
}
else if (pollResult != null)
{
    <div class="card mt-3">
        <div class="card-header bg-primary text-white">
            <h4>@pollResult.Question</h4>
        </div>
        <div class="card-body">            <div class="mb-3">
                <strong>Total Votes: </strong> @pollResult.TotalVotes
            </div>

            @foreach (var option in pollResult.Results)
            {
                <div class="mb-3">
                    <div class="d-flex justify-content-between">
                        <strong>@option.OptionText</strong>
                        <span>@option.VoteCount votes (@($"{option.Percentage:F1}")%)</span>
                    </div>
                    <div class="progress" style="height: 25px;">
                        <div class="progress-bar" 
                             role="progressbar" 
                             style="width: @($"{option.Percentage}%");"
                             aria-valuenow="@option.Percentage" 
                             aria-valuemin="0" 
                             aria-valuemax="100">
                            @($"{option.Percentage:F1}%")
                        </div>
                    </div>
                </div>
            }

            <div class="mt-4">
                <button class="btn btn-primary" @onclick="GoBack">Back</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int PollId { get; set; }    
    private PollResultDTO? pollResult;
    private bool loading = true;
    private string? error = null;

    protected override async Task OnParametersSetAsync()
    {
        await LoadResults();
    }

    private async Task LoadResults()
    {
        try
        {
            loading = true;
            pollResult = await PollService.GetPollResultsAsync(PollId);
        }
        catch (Exception ex)
        {
            error = $"Error loading poll results: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }    private void GoBack()
    {
        NavigationManager.NavigateTo($"/polls/{PollId}");
    }
}
